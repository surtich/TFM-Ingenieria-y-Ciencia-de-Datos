ggplot(msleep, aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("log(Brain weight)") +
ylab("Total sleep time")
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight") +
ylab("Total sleep time") +
xlim(0, 1.5)
ggplot(msleep, aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("log(Brain weight)") +
ylab("Total sleep time")
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight") +
ylab("Total sleep time") +
xlim(0, 1.5)
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight") +
ylab("Total sleep time") +
xlim(0, 1.5)
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(msleep, aes(log(brainwt), sleep_total, colour = vore)) +
geom_point() +
xlab("log(Brain weight)") +
ylab("Total sleep time")
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight") +
ylab("Total sleep time") +
xlim(0, 1.5)
ggplot(msleep, aes(brainwt, sleep_total, colour = vore)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10()
ggplot(msleep, aes(brainwt, sleep_total)) +
geom_point() +
xlab("Brain weight (logarithmic scale)") +
ylab("Total sleep time") +
scale_x_log10() +
facet_wrap(~ vore)
msleep
ggplot(msleep, aes(factor(1), fill = vore)) +
geom_bar()
ggplot(msleep, aes(factor(1), fill = vore)) +
geom_bar()
ggplot(msleep, aes(factor(name), fill = vore)) +
geom_bar()
ggplot(msleep, aes(factor(1), fill = vore)) +
geom_bar()
ggplot(msleep, aes(vore, fill = vore)) +
geom_bar()
ggplot(msleep, aes(vore, fill = vore)) +
geom_bar()
x <- 6
y <- "Scotland"
z <- TRUE
class(x)
class(y)
class(z)
numbers <- c(6, 9, 12)
class(numbers)
all_together <- c(x, y, z)
all_together
class(all_together)
WorldPhones
class(WorldPhones)
raifall
rainfall
rainfall <- c(0,0,0,2,1,1,4)
mode(rainfall)
table(rainfall)
which,amx(table(rainfall))
which.max(table(rainfall))
hist( rnorm(n=10000, mean=100, sd=10), breaks=100 )
hist( rnorm(n=10000, mean=100, sd=10), breaks=10 )
hist( rnorm(n=10000, mean=100, sd=10), breaks=1000 )
hist( rnorm(n=10000, mean=100, sd=10), breaks=100 )
rpois(n=1000, lambda = 1)
mean(rpois(n=1000, lambda = 1))
mean(rpois(n=10000, lambda = 1))
mean(rpois(n=100000, lambda = 1))
mean(rpois(n=100000, lambda = 1))
mean(rpois(n=1000000, lambda = 1))
hist( rbinom(n=1000,size=6,prob=0.5) )
rbinom(n=1000,size=6,prob=0.5) %>% ggplot() %>% geom_histogram()
rbinom(n=1000,size=6,prob=0.5)
ggplot(data=rbinom(n=1000,size=6,prob=0.5) %>% geom_histogram()
)
ggplot(data=rbinom(n=1000,size=6,prob=0.5)) %>% geom_histogram()
ggplot(data=data.fram(x=rbinom(n=1000,size=6,prob=0.5))) %>% geom_histogram()
ggplot(data=data.frame(x=rbinom(n=1000,size=6,prob=0.5))) %>% geom_histogram()
ggplot(data=data.frame(x=rbinom(n=1000,size=6,prob=0.5))) %>% geom_histogram(aes(x))
ggplot(data.frame(x=rbinom(n=1000,size=6,prob=0.5))) %>% geom_histogram()
data.frame(x=rbinom(n=1000,size=6,prob=0.5)) %>& ggplot () %>% geom_histogram()
data.frame(x=rbinom(n=1000,size=6,prob=0.5)) %>& ggplot() %>% geom_histogram()
data.frame(x=rbinom(n=1000,size=6,prob=0.5)) %>% ggplot() %>% geom_histogram()
data.frame(x=rbinom(n=1000,size=6,prob=0.5)) %>% ggplot(aes(x)) %>% geom_histogram()
data.frame(x=rbinom(n=1000,size=6,prob=0.5)) %>% ggplot(aes(x)) + geom_histogram()
data.frame(down=c(2,3),up=c(1,4))
x =data.frame(down=c(2,3),up=c(1,4))
df =data.frame(down=c(2,3),up=c(1,4))
df
rownames(c("jelly", "butter")) <- df
?rownames
rownames(df)
rownames(("jelly", "butter")) <- df
rownames(c("jelly", "butter")) <- df
m2 <- cbind(1, 1:4)
m2
rownames(df) <- c("jelly", "butter")
df
table(df)
?table
as.table(df)
toast <- matrix(c(2,1,3,4),ncol=2,byrow=TRUE)
colnames(toast) <- c(“Down”,”Up”)
toast <- matrix(c(2,1,3,4),ncol=2,byrow=TRUE)
colnames(toast) <- c(“Down”,”Up”)
colnames(toast) <- c("Down","Up")
toast
rownames(toast) <- c("Jelly","Butter")
toast
toast <- as.table(toast)
toast
margin(table)
margin.table(toast)
addmargins(toast)
prop.table(addmargins(toast))
prop.table(toast)
addmargins(prop.table(toast))
toast
addmargins(toast)
boxplot(mpg ~ am, data=mtcars)
mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE) )
mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))
replicate(10,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE)))
hist(replicate(100,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
hist(replicate(100,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
hist(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
hist(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
hist(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
hist(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))))
quantile(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))), c(.1,.9))
quantile(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))), c(.05,.95))
quantile(replicate(1000,mean( sample(mtcars$mpg[ mtcars$am == 0 ],size=19,replace=TRUE))-mean( sample(mtcars$mpg[ mtcars$am == 1 ],size=13,replace=TRUE))), c(.025,.975))
t.test(mtcars$mpg[mtcars$am==0] ,mtcars$mpg[mtcars$am==1])
library(animation)
install.packages("animation")
library(animation)
conf.int(.95)
library(BEST)
install.packages("BEST")
install.packages("~/Descargas/BEST_0.5.4.tar.gz", repos = NULL, type = "source")
install.packages("rjags")
install.packages("~/Descargas/BEST_0.5.4.tar.gz", repos = NULL, type = "source")
install.packages("HDInterval")
install.packages("~/Descargas/BEST_0.5.4.tar.gz", repos = NULL, type = "source")
library(BEST)
carsBest <- BESTmcmc(mtcars$mpg[mtcars$am==0] ,mtcars$mpg[mtcars$am==1])
#png("Figure05_1.png", width = 6, height = 6, units = 'in', res = 300)
plot(carsBest, main=NULL)
#png("Figure05_1.png", width = 6, height = 6, units = 'in', res = 300)
plot(carsBest)
carsBest
plotAll(carsBest)
devtools::install_github("gjkerns/prob")
devtools::install_github("gjkerns/IPSUR")
install.packages("HH")
devtools::install_github("gjkerns/prob")
devtools::install_github("gjkerns/IPSUR")
install.packages("HH")
install.packages("HH")
devtools::install_github("gjkerns/prob")
devtools::install_github("gjkerns/IPSUR")
load("IPSUR")
load(IPSUR)
library(IPSUR)
read(IPSUR)
library(bcogsci)
install.packages("bcogsci")
# install.packages("devtools")
devtools::install_github("bnicenboim/bcogsci")
library(bcogsci)
df_pupil
df_pupil %>% print(n=...)
print(n=...)
prilibrnt(n=...)
library(tidyverse)
df_pupil %>% print(n=...)
print(df_pupil, n=...)
print(df_pupil, n=100)
prior_nc <- c(
prior(normal(800, 200), class = b, coef = Intercept),
prior(normal(0, 1000), class = sigma),
prior(normal(0, 100), class = b, coef = load)
)
librart(brms)
library(brms)
prior_nc <- c(
prior(normal(800, 200), class = b, coef = Intercept),
prior(normal(0, 1000), class = sigma),
prior(normal(0, 100), class = b, coef = load)
)
fit_pupil_non_centered <- brm(p_size ~ 0 + Intercept + load,
data = df_pupil,
family = gaussian(),
prior = prior_nc
)
fit_pupil_non_centered
Hidefit_pupil_wrong <- brm(p_size ~ 1 + load,
data = df_pupil,
family = gaussian(),
prior = prior_nc
)
fit_pupil_wrong <- brm(p_size ~ 1 + load,
data = df_pupil,
family = gaussian(),
prior = prior_nc
)
fit_pupil_non_centered <- brm(p_size ~ 0 + Intercept + load,
data = df_pupil,
family = gaussian(),
prior = prior_nc
)
prior_c <- c(
prior(normal(800, 200), class = Intercept),
prior(normal(0, 1000), class = sigma),
prior(normal(0, 100), class = b, coef = load)
)
fit_pupil_wrong <- brm(p_size ~ 1 + load,
data = df_pupil,
family = gaussian(),
prior = prior_c
)
fit_pupil_wrong
fit_pupil_non_centered
Hidefit_press_trial <- brm(t ~ 1 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class = Intercept),
prior(normal(0, 1), class = sigma),
prior(normal(0, .01), class = b, coef = c_trial)
)
)
df_spacebar
df_spacebar %>% mutate(c_trial=trial-mean(trial))
df_spacebar <- df_spacebar %>% mutate(c_trial=trial-mean(trial))
Hidefit_press_trial <- brm(t ~ 1 + c_trial,
data = df_spacebar,
family = lognormal(),
prior = c(
prior(normal(6, 1.5), class = Intercept),
prior(normal(0, 1), class = sigma),
prior(normal(0, .01), class = b, coef = c_trial)
)
)
fit_press_trial <- Hidefit_press_trial
fit_press_trial
Hideposterior_summary(fit_press_trial,
variable = c("b_Intercept",
"b_c_trial",
"sigma"))
fit_press_trial,
Hidefit_press_trial
Hideposterior_summary(fit_press_trial,
variable = c("b_Intercept",
"b_c_trial",
"sigma"))
posterior_summary(fit_press_trial,
variable = c("b_Intercept",
"b_c_trial",
"sigma"))
alpha_samples <- as_draws_df(fit_press_trial)$b_Intercept
beta_samples <- as_draws_df(fit_press_trial)$b_c_trial
effect_middle_ms <- exp(alpha_samples) -
exp(alpha_samples - 1 * beta_samples)
## ms effect in the middle of the expt
## (mean trial vs. mean trial - 1)
c(mean = mean(effect_middle_ms),
quantile(effect_middle_ms, c(0.025, 0.975)))
first_trial <- min(df_spacebar$c_trial)
second_trial <- min(df_spacebar$c_trial) + 1
effect_beginning_ms <-
exp(alpha_samples + second_trial * beta_samples) -
exp(alpha_samples + first_trial * beta_samples)
## ms effect from first to second trial:
c(mean = mean(effect_beginning_ms),
quantile(effect_beginning_ms, c(0.025, 0.975)))
first_trial
second_trial
Hidenewdata_1 <- data.frame(c_trial = c(first_trial, second_trial))
newdata_1 <- data.frame(c_trial = c(first_trial, second_trial))
newdata_1
beginning <- fitted(fit_press_trial,
newdata = newdata_1,
summary = FALSE)
head(beginning, 3)
df_recall
rlogis(10)
library(tidyverse)
library(stargazer)
install.packages("stargazer")
library(tidyverse)
library(stargazer)
tb <- tibble(
female = ifelse(runif(10000)>=0.5,1,0),
ability = rnorm(10000),
discrimination = female,
occupation = 1 + 2*ability + 0*female - 2*discrimination + rnorm(10000),
wage = 1 - 1*discrimination + 1*occupation + 2*ability + rnorm(10000)
)
lm_1 <- lm(wage ~ female, tb)
lm_2 <- lm(wage ~ female + occupation, tb)
lm_3 <- lm(wage ~ female + occupation + ability, tb)
stargazer(lm_1,lm_2,lm_3, type = "text",
column.labels = c("Biased Unconditional",
"Biased",
"Unbiased Conditional"))
library(tidyverse)
library(patchwork)
set.seed(3444)
star_is_born <- tibble(
beauty = rnorm(2500),
talent = rnorm(2500),
score = beauty + talent,
c85 = quantile(score, .85),
star = ifelse(score>=c85,1,0)
)
p1 = star_is_born %>%
ggplot(aes(x = talent, y = beauty)) +
geom_point(size = 1, alpha = 0.5) + xlim(-4, 4) + ylim(-4, 4) +
geom_smooth(method = 'lm', se = FALSE) +
labs(title = "Everyone")
p2 = star_is_born %>%
ggplot(aes(x = talent, y = beauty, color = factor(star))) +
geom_point(size = 1, alpha = 0.25) + xlim(-4, 4) + ylim(-4, 4) +
geom_smooth(method = 'lm', se = FALSE) +
labs(title = "Everyone, but different") +
scale_color_discrete(name = 'Star')
p1 + p2
?qnorm
qnorm(0.025)
# 7th edition on CRAN
install.packages("wooldridge")
library("wooldridge")
?wage1
wage1
library(adventr)
install.packages("adventr")
library(adventr)
library(adventr)
learnr::run_tutorial("adventr_02", package = "adventr")
learnr::run_tutorial("adventr_03", package = "adventr")
learnr::run_tutorial("adventr_04", package = "adventr")
if(!require(remotes)){
install.packages('remotes')
}
remotes::install_github("profandyfield/discovr")
learnr::run_tutorial("discovr_02", package = "discovr")
learnr::run_tutorial("discovr_08", package = "discovr")
learnr::run_tutorial("discovr_01", package = "discovr")
learnr::run_tutorial("discovr_02", package = "discovr")
learnr::run_tutorial("discovr_03", package = "discovr")
learnr::run_tutorial("adventr_05", package = "adventr")
learnr::run_tutorial("adventr_10", package = "adventr")
learnr::run_tutorial("adventr_11", package = "adventr")
learnr::run_tutorial("adventr_15", package = "adventr")
learnr::run_tutorial("adventr_mlm", package = "adventr")
learnr::run_tutorial("discovr_03", package = "discovr")
learnr::run_tutorial("discovr_04", package = "discovr")
learnr::run_tutorial("discovr_05", package = "discovr")
learnr::run_tutorial("discovr_05", package = "discovr")
learnr::run_tutorial("discovr_06", package = "discovr")
install.packages("qqconf")
install.packages("qqconf")
install.packages("qqconf")
learnr::run_tutorial("discovr_06", package = "discovr")
learnr::run_tutorial("discovr_07", package = "discovr")
learnr::run_tutorial("discovr_08", package = "discovr")
learnr::run_tutorial("discovr_09", package = "discovr")
learnr::run_tutorial("discovr_09", package = "discovr")
learnr::run_tutorial("discovr_10", package = "discovr")
learnr::run_tutorial("discovr_11", package = "discovr")
learnr::run_tutorial("discovr_12", package = "discovr")
learnr::run_tutorial("discovr_13", package = "discovr")
learnr::run_tutorial("discovr_14", package = "discovr")
learnr::run_tutorial("discovr_15", package = "discovr")
learnr::run_tutorial("discovr_16", package = "discovr")
learnr::run_tutorial("discovr_17", package = "discovr")
learnr::run_tutorial("discovr_15_growth", package = "discovr")
x1 = rnorm(100)
x1
x2 = rnorm(100)
y = rnorm(100)
lm1 <- lm(y ~ x1)
lm2 <- lm(y ~ x1 + x2)
lm1
lm2
lm3 <- lm(x2 ~ x1)
lm3
coef(lm3)
coef(lm3)[2]
coef(lm3)[2]
coef(lm2)
coef(lm2)[2]
coef(lm2)[2]+coef(lm2)[3]*coef(lm3[2])
coef(lm2)[3]*coef(lm3[2])
coef(lm2)[3]
coef(lm3[2])
coef(lm3[2]
2
coef(lm2)[2]+coef(lm2)[3]*coef(lm3)[2]
lm1
cor(x1, x2)
cor(x1, y)
cor(x2, y)
x1 = rnorm(1000)
x2 = rnorm(1000)
y = rnorm(1000)
cor(x1,y)
cor(x1,x2)
lm3 <- lm(x2 ~ x1)
lm1 <- lm(y ~ x1)
lm2 <- lm(y ~ x1 + x2)
lm1
lm2
lm1
summry(lm1)
summary(lm1)
summary(lm2)
var(lm1)
names(lm1)
lm1$model
lm1$qr
names(lm1)
lm1$terms
names(lm1)
lm1$assing
lm1$assign
lm1$coefficients
summary(lm1)
names(summary(lm1))
cov(summary(lm1))
(summary(lm1))$cov.unscaled
summary(lm2)
summary(lm1)
(summary(lm1))$cov.unscaled
sessionInfo()
library(ordinal)
load("data.RData")
getwd()
setwd("project/TFMQ")
setwd("projecta/TFMQ")
setwd("projects/TFMQ")
load("data.RData")
setwd("projecta/TFMQ")
load("data.RData")
df_response
clmm_treat.period.subject.item
summary(clmm_treat.period.subject.item)
coef(clmm_treat.period.subject.item)
ranef(clmm_treat.period.subject.item)
library(ordinal)
install.packages("ordinal")
library(ordinal)
ranef(clmm_treat.period.subject.item)
load("data.RData")
library(tidyverse)
install.packages("tidyverse")
brm_treat.period.subject.item <- brm(
Response ~ Treat * Period + (1 + Treat | Subject) + (1 + Treat | Item),
data = df_response,
family = cumulative("logit"),
iter = 4000,
sample_prior = TRUE,
file = "models/brm_treat.period.subject.item",
file_refit = "on_change"
)
source("_setup.R")
brm_treat.period.subject.item <- brm(
Response ~ Treat * Period + (1 + Treat | Subject) + (1 + Treat | Item),
data = df_response,
family = cumulative("logit"),
iter = 4000,
sample_prior = TRUE,
file = "models/brm_treat.period.subject.item",
file_refit = "on_change"
)
