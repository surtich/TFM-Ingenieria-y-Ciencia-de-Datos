
## Comprobación visual de la proporcionalidad de *odds*

```{r}
po.check <- function(x) {
    return(df_response %>% group_by(.data[[x]], Response) %>% count() %>% ungroup(Response) %>% mutate(cum.sum = cumsum(n), log.odds = qlogis(cum.sum / last(cum.sum)), diff.log.odds = log.odds - lead(x = log.odds, n = 1), odds = cum.sum / (last(cum.sum) - cum.sum), ratio.odds = odds / lead(odds)) %>% arrange(Response) %>% filter(Response %in% 1:3) %>% mutate(Predictor = x) %>% rename_with(~"Value", x))
}


bind_rows(po.check("Item"), po.check("Period"), po.check("Seq"), po.check("Treat")) %>%
    mutate(Response = recode_factor(Response, "1" = "1|2", "2" = "2|3", "3" = "3|4")) %>%
    ggplot(aes(
        x = diff.log.odds, y = Value,
        shape = Predictor, color = Predictor
    )) +
    geom_point(size = 3) +
    facet_grid(
        cols = vars(Response), rows = vars(Predictor), scales = "free_y",
        space = "free", switch = "both"
    ) +
    theme(panel.spacing.y = unit(0.2, "lines"))
```


## Modelado estadístico

```{r}
modelsummary(list(`Response ~ 1` = clm(Response ~ 1, data = df_response), `Response ~ Treat` = clm(Response ~ Treat, data = df_response)), estimate = "{estimate}{stars}", gof_omit = "RMSE", statistic = c("std.error", "conf.int"), shape = term:contrast ~ model + statistic, output = "kableExtra", metrics = "Log.Lik.")
```
