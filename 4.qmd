```{r}
source("_setup.R")
```

```{r}
# Leemos el tibble preprocesado
test_all_df <- read_csv("./data/preprocess/test_all.csv", show_col_types = FALSE)

test_all_df <- test_all_df %>% mutate(Seq = ifelse(Group == "A", "AB", "BA"))

# Nos quedamos con los estudiantes que sólo han hecho un test
unique_tests_df <- test_all_df %>%
    group_by(User) %>%
    mutate(Rows = n()) %>%
    filter(Rows == 1) %>%
    ungroup()


unique_count <- unique_tests_df %>% count(Seq)

# Eliminamos aquellos usuarios que no han hecho uno de los test
test_all_df <- test_all_df %>%
    group_by(User) %>%
    mutate(Rows = n()) %>%
    filter(Rows > 1) %>%
    ungroup()
```



# Modelado estadístico {#sec-modelado}

## Análisis inicial {#sec-eda}


Como se explica en la @tbl-variables, al subtitulado le denominamos tratamiento y a sus niveles (correcto e incorrecto) los hemos llamado $A$ y $B$ sin hacer ninguna conjetura de cual de los dos es el subtitulado correcto. El grupo con secuencia $AB$ será el que primero vio el vídeo con subtitulado $A$ y luego el $B$. Análogamente, el grupo con secuencia $BA$ vio los vídeos en orden inverso. Recuérdese que el nivel 0 de respuesta se corresponde con "No sé / No contesto" (ver @tbl-likert-levels). Tras eliminar los test de los usuarios que no dieron su consentimiento para participar en el estudio y los de los que no realizaron el segundo test, las dos cohortes están equilibradas (ver @fig-groups).

```{r}
#| label: fig-groups
#| fig-cap: Estudiantes asignados a cada grupo.
#| fig-height: 2

df_all %>%
    distinct(Seq, Subject) %>%
    group_by(Seq) %>%
    count() %>%
    ggplot(aes(x = Seq, y = n, fill = Seq)) +
    geom_bar(stat = "identity") +
    geom_text(aes(label = n, y = n / 2), size = 6) +
    geom_text(aes(label = Seq, y = -3), size = 6) +
    theme_void() +
    theme(
        legend.position = "none", plot.title = element_text(hjust = 0.6)
    )
```

### Análisis de la calidad de los datos

En esta sección buscamos si hay test que tienen valores de respuesta que puedan resultar anómalos. 
En los test no se ha observado ningún valor nulo ni erróneo.

```{r}
# Calculamos el tiempo transcurrido entre la realización de los test

washout_periods_df <- test_all_df %>%
    dplyr::select(User, Test, Row, LastTry) %>%
    pivot_wider(id_cols = c(User), names_from = Test, values_from = c(Row, LastTry), names_prefix = "Test") %>%
    mutate(diff_min = difftime(LastTry_Test02, LastTry_Test01, units = "mins")) %>%
    dplyr::select(Row_Test01, Row_Test02, User, diff_min)



washout_cut_1 <- 5
washout_cut_2 <- 2
```

El campo `LastTry` contiene la fecha y hora de realización del test. Con esta información podemos conocer el tiempo que empleó cada estudiante entre actividades. 
La @tbl-washout muestra que hay algunos test que se hicieron demasiado rápido
^[Hay que tener en cuenta que la duración de vídeo es de algo más de 40 segundos y que los estudiantes tienen que contestar un test de 18 ítems.].

```{r}
#| label: tbl-washout
#| tbl-cap: Tiempos de realización de la segunda actividad de duración inferior a 2 minutos.

washout_periods_df %>%
    filter(diff_min < washout_cut_2) %>%
    mutate(Minutes = round(diff_min, 2)) %>%
    dplyr::select(Minutes) %>%
    arrange(Minutes) %>%
    gt()
```

```{r}
# Calculamos cuántas respuestas diferentes tiene cada test

n_questions <- sum(startsWith(colnames(test_all_df), "Q"))

test_lg_df <- test_all_df %>% pivot_longer(cols = all_of(starts_with("Q")), names_to = "Question", values_to = "Response")

distinct_response_df <- test_lg_df %>%
    group_by(Row, Test, Seq, User) %>%
    count(Response)



distinct_cut_1 <- 2
distinct_cut_2 <- 1


distinct_response__summary_df <- distinct_response_df %>%
    count() %>%
    ungroup() %>%
    dplyr::select(n) %>%
    group_by(n) %>%
    count() %>%
    ungroup()
```



La @fig-distinct muestra que hay `r (distinct_response__summary_df %>%
    filter(n == distinct_cut_1))$nn`
test en los que el estudiante contestó a todas las preguntas usando únicamente `r distinct_cut_1` respuestas diferentes.
Además hay `r (distinct_response__summary_df %>%
    filter(n == distinct_cut_2))$nn` 
    test en los que se contestaron todas las preguntas con `r distinct_cut_2` respuesta.

```{r}
#| label: fig-distinct
#| fig-cap: Número de respuestas diferentes en un mismo test.
#| warning: false

distinct_response__summary_df <- distinct_response_df %>%
    count() %>%
    ungroup() %>%
    dplyr::select(n) %>%
    group_by(n) %>%
    count()

distinct_response__summary_df %>%
    ggplot(aes(x = n, y = nn, fill = factor(n))) +
    geom_bar(stat = "identity") +
    theme_void() +
    theme(legend.position = "none", plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 30, b = 0, l = 0), angle = 90), axis.text.y = element_blank()) +
    geom_text(aes(label = n, y = 3), size = 7) +
    geom_text(aes(label = nn), nudge_y = 1.5, size = 5) +
    labs(y = "Total de test", x = "Respuestas diferentes por test")

```

La tabla @tbl-distinct2 muestra los test de respuesta única y el valor de esa respuesta.

```{r}
#| label: tbl-distinct2
#| tbl-cap: Test en los que todas las preguntas se contestan el mismo valor de respuesta.

distinct_response_df %>%
    filter(n == n_questions) %>%
    arrange(Response, Seq, Test) %>%
    ungroup() %>%
    dplyr::select(Response, Seq, Test) %>%
    gt()
```

```{r}
# Calculamos cuántas respuestas diferentes hay entre los dos test para cada estudiante

compare_test_df <- test_lg_df %>%
    group_by(User, Question) %>%
    arrange(User, Question) %>%
    mutate(n = as.numeric(Response != lag(Response))) %>%
    arrange(User, Question) %>%
    filter(row_number() %% 2 == 0) %>%
    summarize(Total = sum(n)) %>%
    summarize(Total = sum(Total))

```

La @fig-compare presenta la distribución de la cantidad de respuestas cuyo valor cambia entre los dos test que realiza cada estudiante.

```{r}
#| label: fig-compare
#| fig-cap: Número de respuestas diferentes entre los test para cada estudiante.

compare_test_df %>%
    count(Total) %>%
    mutate(Total = factor(Total, levels = 0:max(Total))) %>%
    ggplot(aes(x = Total, y = n, fill = Total)) +
    geom_bar(stat = "identity") +
    theme_void() +
    theme(legend.position = "none", plot.title = element_text(hjust = 0.5), axis.title = element_text(size = 10), axis.title.y = element_text(margin = margin(t = 0, r = 30, b = 0, l = 0), angle = 90), axis.text.y = element_blank()) +
    geom_text(aes(label = Total, y = 0.5), size = 6) +
    geom_text(aes(label = n), nudge_y = 0.5, size = 5) +
    labs(y = "Total de test", x = "Número de respuestas diferentes") +
    scale_x_discrete(drop = FALSE)
```


Tan solo `r compare_test_df %>% filter(Total == 0) %>% nrow()` estudiante respondió a todas las preguntas con el mismo valor en los dos test. Por otro lado, no hay test que tengan un número excesivo de contestaciones "No sé/No contesto" (ver @tbl-noanswer).


```{r}
#| label: tbl-noanswer
#| tbl-cap: Los 5 test con más respuestas 'No sé/No contesto'
test_lg_df %>%
    filter(Response == 5) %>%
    group_by(Test, Row, User) %>%
    count() %>%
    arrange(desc(n)) %>%
    ungroup() %>%
    dplyr::select(Test, `Total respuesta por test` = n) %>%
    head(5) %>%
    gt()
```

Vemos que algunos test tienen valores que no parecen muy razonables. Por ejemplo, no parece razonable realizar la actividad en menos de `r washout_cut_2` minutos. Se observa que en algunos test hay poca variabilidad. Sin embargo, no son muchos los test con estas características así que se ha decidido mantener estos datos a pesar de que se pueda dudar de si en ellos los estudiantes contestaron con la debida atención y diligencia.

### Comparación de los tratamientos $A$ y $B$ entre grupos. {#sec-eda-3}

La @fig-diff presenta una forma de comparar los dos test realizados por los estudiantes. Para cada estudiante se comparó pregunta a pregunta sus dos test y se contabilizó la diferencia entre el número de preguntas en que la puntuación en el segundo vídeo fue superior y en las que lo fue inferior (las que no variaron de puntuación no se consideraron). En el eje $x$ se muestra la diferencia entre preguntas. Cantidades negativas indican que hay más respuestas en el segundo de los test que han empeorado respecto al primero de las que han mejorado. En el eje $y$ se representa el número de estudiantes para cada diferencia. Esta frecuencia se representa en negativo cuando la diferencia es negativa ^[En la comparación se han omitido aquellas respuestas en las que el estudiante contestó "No sé/No contesto" en la pregunta correspondiente de uno de los test.]. Esto es una forma de evaluar si el estudiante valoró mejor o no el segundo vídeo que el primero. 


```{r}
compare_test_user_df <- test_lg_df %>%
    group_by(Seq, User, Question) %>%
    arrange(User, Question, Test) %>%
    mutate(n = if_else(Response != 5 & lag(Response) != 5, sign(Response - lag(Response)), 0)) %>%
    arrange(User, Question, Test) %>%
    filter(row_number() %% 2 == 0) %>%
    summarize(Total = sum(n)) %>%
    summarize(Total = sum(Total))

compare_test_df <- compare_test_user_df %>%
    count(Total) %>%
    mutate(n = if_else(Total >= 0, n, -n))
```

```{r}
#| label: fig-diff
#| fig-cap: Frecuencias absolutas de las diferencias en las respuestas entre test por estudiante y grupo.
#| fig-pos: h
#| fig-height: 8
#| fig-width: 12

compare_test_df %>% ggplot(aes(x = Total, y = n, fill = Total >= 0)) +
    geom_bar(stat = "identity") +
    scale_fill_manual(values = c("darkred", "darkblue")) +
    facet_wrap(~Seq, nrow = 2, scales = "free_y", labeller = function(variable, value) {
        paste0("Seq ", value)
    }) +
    theme(
        legend.position = "none",
        axis.title = element_text(size = 15),
        strip.text = element_text(size = 16), strip.background = element_blank(), panel.grid.minor = element_blank()
    ) +
    scale_y_continuous(
        breaks = -15:15
    ) +
    scale_x_continuous(
        breaks = -18:18
    ) +
    labs(y = "Cantidad de test (en negativo cuando la diferencia es negativa)", x = "Diferencias entre test de un estudiante (negativo cuando el segundo test es valorado peor)")
```

Vemos que en el grupo $AB$ las diferencias tienden a ser negativas y en el $BA$ positivas. Esto estaría indicando que los estudiantes valoran mejor el subtitulado de nivel $A$ en ambas secuencias. Por ello es esperable que las respuestas de los estudiantes del grupo $AB$ hayan empeorado y que las diferencias sean negativas y que lo contrario haya sucedido con las del grupo $BA$. La diferencia más frecuente en el grupo $AB$ es `r -((compare_test_df %>% arrange(n)) %>% head(1))$Total` y en el grupo $BA$ este valor es `r ((compare_test_df %>% arrange(n)) %>% tail(1))$Total`.

Resulta llamativo que haya estudiantes cuyas contestaciones estén tan alejadas de la tendencia de su grupo. En la @tbl-diff se muestran los tiempos que han transcurrido entre la realización de los test de aquellos estudiantes cuyas respuestas difieren de forma importante de su grupo. Se observa que casi todos son tiempos entre actividades muy cortos. En cualquier caso y, como no son muchos, se ha decidido no eliminarlos y realizar el análisis con ellos.

```{r}
#| label: tbl-diff
#| tbl-cap: Estudiantes que tienen diferencias en sus respuestas muy alejadas de la tendencia de su grupo.
left_join(compare_test_user_df %>% filter(Seq == "AB" & Total >= 0 | Seq == "BA" & Total <= 0), test_all_df %>% dplyr::select(Row, User, Test, LastTry) %>%
    pivot_wider(names_from = Test, values_from = c(Row, LastTry))) %>%
    rename(Diff = Total) %>%
    arrange(desc(Diff), Seq, User) %>%
    filter(abs(Diff) >= 7) %>%
    mutate(Minutes = round(difftime(LastTry_02, LastTry_01, units = "mins"), 2)) %>%
    ungroup() %>%
    dplyr::select(-c(User, Row_01, Row_02, LastTry_01, LastTry_02)) %>%
    gt()
```

```{r}
df_freqs <- df_all %>%
    group_by(Period, Seq, Treat) %>%
    count(Response) %>%
    mutate(freq = n / sum(n)) %>%
    ungroup()


df_freqs_treat <- df_all %>%
    group_by(Treat) %>%
    count(Response) %>%
    mutate(freq = n / sum(n)) %>%
    ungroup()

df_freqs_period <- df_all %>%
    group_by(Period) %>%
    count(Response) %>%
    mutate(freq = n / sum(n)) %>%
    ungroup()


df_freqs_seq <- df_all %>%
    group_by(Seq) %>%
    count(Response) %>%
    mutate(freq = n / sum(n)) %>%
    ungroup()


filter_in <- function(df, ...) {
    # Convertir los argumentos en una lista
    arg_list <- list(...)

    # Filtrar por cada columna y valor
    for (arg in names(arg_list)) {
        if (!is.null(arg_list[[arg]])) {
            df <- df[df[[arg]] %in% arg_list[[arg]], ]
        }
    }

    return(df)
}



format_freq <- function(freq) {
    paste(round(100 * freq, 0), "%", sep = "")
}

get_freqs <- function(df = df_freqs, ...) {
    format_freq(sum(filter_in(df, ...) %>% dplyr::select(freq)))
}
```


En la @fig-freqs representamos la frecuencia relativa del valor de respuesta para cada grupo y test en todas la preguntas
^[En el @tbl-resume se presenta la misma información con los valores absolutos.]. Esta es otra forma de comparar los niveles de subtitulado.


```{r}
df_resume <- df_all %>%
    dplyr::select(Subject, Period, Seq, Treat, Response, Question) %>%
    group_by(Seq, Period, Treat) %>%
    count(Response) %>%
    ungroup()

min_freq_response <- min(df_resume$n)
max_freq_response <- max(df_resume$n)
wine_red <- "#58181F"

```

```{r}
#| label: tbl-resume
#| tbl-cap: Resumen de frecuencias de respuesta.
df_resume %>%
    pivot_wider(id_cols = c(Seq, Period, Treat), names_from = Response, values_from = n) %>%
    gt() %>%
    tab_spanner(columns = `1`:`5`, label = "Response") %>%
    data_color(
        columns = `1`:`5`,
        colors = scales::col_numeric(
            palette = c("white", wine_red), domain = c(min_freq_response, max_freq_response)
        )
    )
```


La @fig-freqs muestra algunas cuestiones interesantes:

* El tratamiento (subtitulado) con nivel $A$ presenta claramente mayores valores de respuesta que el $B$ como ya habíamos visto (ver @fig-diff).

* En general los dos grupos muestran bastante acuerdo en el subtitulado en ambos niveles: En el nivel de tratamiento $A$ los dos grupos tienen una frecuencia relativa similar de respuestas positivas (valores 4 y 5). El grupo $AB$ tiene un `r get_freqs(Seq="AB", Treat="A", Response=c(4,5))` de respuestas positivas frente a un `r get_freqs(Seq="BA", Treat="A", Response=c(4,5))` el grupo $BA$. No obstante, el grupo $AB$ tiene más respuestas con valor 5 que el grupo $BA$ (`r get_freqs(Seq="AB", Treat="A", Response=5)` frente a `r get_freqs(Seq="BA", Treat="A", Response=5)`). La valoración es también similar entre grupos en el nivel de tratamiento $B$: el grupo $AB$ tiene `r get_freqs(Seq="AB", Treat="B", Response=c(4,5))` de respuestas positivas y `r get_freqs(Seq="BA", Treat="B", Response=c(4,5))` el grupo $BA$. Las valoraciones negativas (1, 2), la neutra (3) y la 'No sé / No contesto' (0) son también muy similares.

* Las respuestas son similares entre periodos aunque ligeramente más negativas en el segundo. Así un `r get_freqs(df_freqs_period, Period=1, Response=c(4,5))` de las respuestas son positivas en el primer periodo frente a un `r get_freqs(df_freqs_period, Period=2, Response=c(4,5))` en el segundo.


```{r}
#| label: fig-freqs
#| fig-cap: Frecuencias relativas de las respuestas al test.
#| fig-height: 6
#| fig-pos: h

level_labeller <- function(variable, value) {
    paste0(variable, " ", value)
}


df_freqs %>%
    ggplot(aes(
        x = Response, y = freq,
        fill = Response
    )) +
    geom_bar(stat = "identity") +
    facet_wrap(~ Seq + Period + Treat, nrow = 2, labeller = level_labeller) +
    geom_text(aes(label = Response, y = 0.9), size = 5) +
    geom_text(aes(label = formatC(freq, digits = 2, format = "f")), nudge_y = 0.1, size = 4) +
    ylim(0, 1) +
    theme(
        legend.position = "none",
        axis.line.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank(),
        strip.text = element_text(size = 16), strip.background = element_blank()
    ) +
    labs(y = "Frecuencia relativa de respuesta", x = "Valor de la respuesta")
```

El análisis marginalizado de tratamiento, secuencia y periodo tiene estos resultados referidos a las preguntas con contestación positiva (4, 5):

* El tratamiento $A$ tiene un `r get_freqs(df_freqs_treat, Treat="A", Response=c(4,5))` marginalizado de respuestas positivas frente al `r get_freqs(df_freqs_treat, Treat="B", Response=c(4,5))` del tratamiento $B$.

* El periodo 1 tiene un `r get_freqs(df_freqs_period, Period=1, Response=c(4,5))` marginalizado de respuestas positivas frente al `r get_freqs(df_freqs_period, Period=2, Response=c(4,5))` del periodo 2.

* Finalmente, la secuencia $AB$ tiene un `r get_freqs(df_freqs_seq, Seq="AB", Response=c(4,5))`
de respuestas positivas frente `r get_freqs(df_freqs_seq, Seq="BA", Response=c(4,5))` de la secuencia $BA$.


### Análisis de las preguntas.

```{r}
likert_df <- df_clean %>% pivot_wider(names_from = Question, values_from = Response_l, id_cols = c(Seq, Period, Subject, Treat))
```

El gráfico @fig-levels muestra la frecuencia relativa por grupo y por test de las preguntas clasificadas por niveles de respuesta, considerando que:

 * Los niveles 1 y 2 se consideran valoraciones negativas.
 * El nivel 3 se considera neutro.
 * Los niveles 4 y 5 se consideran positivos.
 * El nivel 0 ("No sé / No contesto") se excluye en este análisis.

Se muestra en primer lugar la pregunta 18 por ser una valoración global del subtitulado y que resume la opinión que sobre el mismo tiene el estudiante. Volvemos a constatar que el subtitulado $A$ es mejor valorado por los estudiantes, pero ahora vemos que en las 18 preguntas ambos grupos tienen más puntuaciones positivas y menos negativas en el subtitulado $A$ que el $B$. También volvemos a encontrar que los dos grupos valoran de forma muy similar los dos niveles de subtitulado en todas la preguntas. En el nivel de subtitulado $A$ las preguntas $Q15$, $Q16$ y $Q17$ obtienen relativamente peores valoraciones (consultar la @tbl-likert-scale para ver los valores) y estas son similares en ambos subtitulados. Hay algunas preguntas que son valoradas de forma positiva incluso en el nivel de subtitulado $B$ (por ejemplo $Q04$ o $Q13$) y que, por lo tanto, su valoración es similar en ambos subtitulados. Por último, las preguntas $Q05$ y $Q09$ (también la $Q14$ pero solo para el grupo $BA$) tienen una valoración muy negativa en el nivel de subtitulado $B$.

```{r}
#| label: fig-levels
#| out-width: \\widthw
#| fig-height: 6
#| fig-cap: Frecuencias relativas de las respuestas por pregunta.

df_clean %>%
    group_by(Seq, Treat, Question, Level) %>%
    mutate(Question = factor(Question, levels = rev(levels(Question)))) %>%
    count(Response) %>%
    ggplot(aes(x = Question, y = n, fill = Level)) +
    geom_bar(position = "fill", stat = "identity") +
    scale_y_continuous(labels = scales::percent, expand = c(0, 0)) +
    scale_fill_brewer(name = "Level:", type = "div", palette = "Spectral") +
    ylab("Percentage") +
    theme_bw() +
    theme(legend.position = "top", axis.text.y = element_text(size = 7)) +
    facet_grid(rows = vars(Seq), cols = vars(Treat)) +
    coord_flip() +
    labs(x = "Question", y = "Percentage", fill = "Response")
```

La figura @fig-likert clasifica la preguntas por valoración y permite constatar lo que ya habíamos visto en el párrafo anterior con mayor comodidad.

```{r}
#| label: fig-likert
#| layout-ncol: 2
#| fig-height: 10
#| fig-cap: Preguntas ordenadas por valoración.
#| fig-subcap:
#|   - "Seq AB , Treat A"
#|   - "Seq AB , Treat B"
#|   - "Seq BA , Treat A"
#|   - "Seq BA , Treat B"
likert_df %>%
    filter(Seq == "AB" & Treat == "A") %>%
    dplyr::select(-c(Subject, Treat, Period, Seq)) %>%
    data.frame() %>%
    likert() %>%
    plot()

likert_df %>%
    filter(Seq == "AB" & Treat == "B") %>%
    dplyr::select(-c(Subject, Treat, Period, Seq)) %>%
    data.frame() %>%
    likert() %>%
    plot()
likert_df %>%
    filter(Seq == "BA" & Treat == "A") %>%
    dplyr::select(-c(Subject, Treat, Period, Seq)) %>%
    data.frame() %>%
    likert() %>%
    plot()

likert_df %>%
    filter(Seq == "BA" & Treat == "B") %>%
    dplyr::select(-c(Subject, Treat, Period, Seq)) %>%
    data.frame() %>%
    likert() %>%
    plot()
```

 
{{< include 4.1.qmd >}}













